// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_
#define FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_

#include "flatbuffers/flatbuffers.h"

#include "../include_test1_generated.h"

namespace MyGame {
namespace OtherNameSpace {

struct Unused;

struct TableB;
struct TableBBuilder;

enum FromInclude : int64_t {
  FromInclude_IncludeVal = 0,
  FromInclude_MIN = FromInclude_IncludeVal,
  FromInclude_MAX = FromInclude_IncludeVal
};

inline const FromInclude (&EnumValuesFromInclude())[1] {
  static const FromInclude values[] = {
    FromInclude_IncludeVal
  };
  return values;
}

inline const char * const *EnumNamesFromInclude() {
  static const char * const names[2] = {
    "IncludeVal",
    nullptr
  };
  return names;
}

inline const char *EnumNameFromInclude(FromInclude e) {
  if (flatbuffers::IsOutRange(e, FromInclude_IncludeVal, FromInclude_IncludeVal)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFromInclude()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Unused FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t a_;

 public:
  Unused()
      : a_(0) {
  }
  Unused(int32_t _a)
      : a_(flatbuffers::EndianScalar(_a)) {
  }
  int32_t a() const {
    return flatbuffers::EndianScalar(a_);
  }
};
FLATBUFFERS_STRUCT_END(Unused, 4);

struct TableB FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TableBBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_A = 4
  };
  const TableA *a() const {
    return GetPointer<const TableA *>(VT_A);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_A) &&
           verifier.VerifyTable(a()) &&
           verifier.EndTable();
  }
};

struct TableBBuilder {
  typedef TableB Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_a(flatbuffers::Offset<TableA> a) {
    fbb_.AddOffset(TableB::VT_A, a);
  }
  explicit TableBBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TableB> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TableB>(end);
    return o;
  }
};

inline flatbuffers::Offset<TableB> CreateTableB(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TableA> a = 0) {
  TableBBuilder builder_(_fbb);
  builder_.add_a(a);
  return builder_.Finish();
}

}  // namespace OtherNameSpace
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_INCLUDETEST2_MYGAME_OTHERNAMESPACE_H_
