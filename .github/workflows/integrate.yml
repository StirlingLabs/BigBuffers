name: Integration
on:
  pull_request:
    types: [ 'opened', 'reopened', 'edited', 'ready_for_review', 'synchronize' ]
  push:
    branches: ['main', 'master' ]
    tags: [ '!v[0-9].*' ]
  workflow_call:

defaults:
  run:
    shell: bash

jobs:
  skip_check:
    name: Run Check
    continue-on-error: true
    runs-on: ubuntu-22.04
    outputs:
      should_skip: ${{ steps.collate_checks.outputs.should_skip }}
      run_integration: true
      run_release: ${{ !steps.collate_checks.outputs.should_skip }}
    steps:
      - name: Check if CI is forced
        id: force_ci_check
        if: |
          github.event_name == 'push' &&
          contains(github.event.head_commit.message, '[force ci]')
        run: |
          echo "::set-output name=should_skip::false"
      - name: Check if PR is a draft
        id: pr_draft_check
        if: |
          github.event.pull_request &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false')
        env:
          draft: ${{ github.event.pull_request.draft }}
        run: |
          echo "::set-output name=should_skip::$draft"
      - name: Check if this is a Release
        id: released_check
        if: |
          github.event_name == 'push' &&
          github.ref_type == 'tag' &&
          startsWith(github.ref_name, 'v')
        run: |
          echo "::set-output name=should_skip::false"
      - name: Check if changes pushed
        id: push_new_check
        if: |
          github.event_name == 'push' &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
          (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false')
        uses: fkirc/skip-duplicate-actions@v4
        with:
          skip_after_successful_duplicate: 'true'
          paths_ignore: '["**/README.md", ".idea/**", ".editorconfig", ".git*", "docs/**", ".github/**"]'
          github_token: ${{ secrets.GITHUB_TOKEN }}
          concurrent_skipping: never
      - name: Collate Checks
        id: collate_checks
        if: |
          (steps.pr_draft_check.outcome == 'skipped' || steps.pr_draft_check.outputs.should_skip != 'false') &&
          (steps.force_ci_check.outcome == 'skipped' || steps.force_ci_check.outputs.should_skip != 'false') &&
          (steps.released_check.outcome == 'skipped' || steps.released_check.outputs.should_skip != 'false') &&
          (steps.push_new_check.outcome == 'skipped' || steps.push_new_check.outputs.should_skip == 'true')
        env:
          pr_draft_check: ${{ steps.pr_draft_check.outcome }}
          force_ci_check: ${{ steps.force_ci_check.outcome }}
          released_check: ${{ steps.released_check.outcome }}
          push_new_check: ${{ steps.push_new_check.outcome }}
        run: |
          echo "Step status was $pr_draft_check : $force_ci_check : $released_check : $push_new_check"
          if [ "$pr_draft_check" == "skipped" ] && \
            [ "$force_ci_check" == "skipped" ] && \
            [ "$released_check" == "skipped" ] && \
            [ "$push_new_check" == "skipped" ]
          then
            echo "All checks skipped, I don't know what to do."
            exit 1
          else
            echo "::set-output name=should_skip::true"
          fi

  build:
    name: Build & Test
    needs: skip_check
    if: needs.skip_check.outputs.should_skip != 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.1

      - name: Set Platform-specific CMake arguments
        id: cmake_args
        run: |
          case "${RUNNER_OS}" in
            Linux)    gen="Unix Makefiles";arg="" ;;
            macOS)    gen="Unix Makefiles";arg="-DCMAKE_OSX_ARCHITECTURES='arm64;x86_64'" ;;
            Windows)  gen="Visual Studio 17 2022";arg="-A x64" ;;
            *)        echo "Unrecognised platform: ${RUNNER_OS}." && exit 1 ;;
          esac
          echo "::set-output name=generator::\"$gen\""
          echo "::set-output name=arguments::\"$arg\""

      - name: Build bufc
        run: |
          mkdir cmake-build-release && cd cmake-build-release
          cmake -G ${{ steps.cmake_args.outputs.generator }} \
            -DCMAKE_BUILD_TYPE=Release \
            ${{ steps.cmake_args.outputs.arguments }} \
            ..
          cmake --build . --target bufc --config Release

      - name: NuGet Auth
        uses: StirlingLabs/GithubNugetAuthAction@v21.08.1

      - name: Build C# Implementation
        run: |
          dotnet build BigBuffers.sln -c Release
        working-directory: net

      - name: Test C# Implementation
        run: |
          dotnet test BigBuffers.sln --no-build -c Release --logger GitHubActions -v n --blame-hang
        working-directory: net

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: bufc-${{ runner.os }}
          path: cmake-build-release/bufc

      - name: Upload NuPkg as Artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: Nuget-Packages
          path: net\artifacts\*.nupkg
